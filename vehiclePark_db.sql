create table users (
    userid    integer
        generated by default as identity ( start with 100 increment by 1 ),
    name      varchar2(100) not null,
    email     varchar2(100) not null unique,
    password  varchar2(100) not null,
    country   varchar2(100),
    city      varchar2(100),
    area      varchar2(100),
    longitude number(12, 8),
    latitude  number(12, 8),
    phone     varchar2(20),
    pro_url   varchar(100),
    constraint pk_users primary key ( userid )
);

create table garage (
    garageid  integer
        generated always as identity ( start with 1 increment by 1 ),
    ownerid   integer not null,
    country   varchar2(30) not null,
    city      varchar2(30) not null,
    area      varchar2(30) not null,
    name      varchar2(100) not null,
    longitude number(12, 8) not null,
    latitude  number(12, 8) not null,
    status    integer not null,
    constraint pk_garage primary key ( garageid ),
    constraint fk_owner foreign key ( ownerid )
        references users ( userid ),
    constraint unq_garage_info unique ( country,
                                        city,
                                        area,
                                        name )
);

create table rent_info (
    garageid    integer not null,
    vehicletype varchar2(100) not null,
    costlong    number(12, 4) default 0,
    costshort   number(12, 4) default 0,
    leftlong    integer default 0,
    leftshort   integer default 0,
    constraint fk_garageid foreign key ( garageid )
        references garage ( garageid ),
    constraint un_rent_info unique ( garageid,
                                     vehicletype )
);

create table vehicle_info (
    vehicleno       varchar2(100) not null,
    vehicle_owner   integer not null,
    vehicletype     varchar2(100) not null,
    vehicle_model   varchar2(100) not null,
    vehicle_company varchar2(100) not null,
    vehicle_color   varchar2(100) not null,
    constraint pk_vehicleno primary key ( vehicleno ),
    constraint fk_vehicle_owner foreign key ( vehicle_owner )
        references users ( userid )
);

create table has_payment (
    vehicleno      varchar2(100) not null,
    garageid       integer not null,
    st_date        date not null,
    payment_amount number(12, 4) default 0,
    servicetype    varchar2(100) default 'SHORT',
    constraint fk_vehicleno_has_payment foreign key ( vehicleno )
        references vehicle_info ( vehicleno ),
    constraint fk_garageid_has_payment foreign key ( garageid )
        references garage ( garageid ),
    constraint unq_has_payment unique ( vehicleno )
);

create table takes_service (
    serviceid    integer
        generated always as identity ( start with 1 increment by 1 ),
    garageid     integer not null,
    vehicleno    varchar2(100) not null,
    servicetype  varchar2(100) not null,
    start_time   date not null,
    end_time     date not null,
    total_amount number(12, 4) not null,
    paid         number(12, 4) not null,
    constraint pk_serviceid primary key ( serviceid ),
    constraint fk_garageid_takes_service foreign key ( garageid )
        references garage ( garageid ),
    constraint fk_vehicleno_takes_service foreign key ( vehicleno )
        references vehicle_info ( vehicleno )
);

create table garage_admin_pay (
    payid        number(*, 0)
        generated always as identity ( start with 1 increment by 1 ),
    garageid     number(*, 0) not null,
    amount       number(12, 4) default 0,
    payment_time date default current_timestamp,
    cur_time     date default current_timestamp,
    constraint pk_garage_admin_pay primary key ( payid ),
    constraint fk_garageid_garage_admin_pay foreign key ( garageid )
        references garage ( garageid )
);

create table notice (
    noticeid    number(*, 0)
        generated always as identity ( start with 1 increment by 1 ),
    userid      number(*, 0) not null,
    message     varchar2(4000 byte) not null,
    notice_time date default current_timestamp,
    is_read     number(*, 0) default 0,
    constraint pk_notiy primary key ( noticeid ),
    constraint fk_notify_userid foreign key ( userid )
        references users ( userid )
)

 -- Procedures
create or replace procedure insert_rent_data (
    gid in garage.garageid%type
) as
begin
    insert into rent_info (
        garageid,
        vehicletype
    ) values (
        gid,
        'CAR'
    );

    insert into rent_info (
        garageid,
        vehicletype
    ) values (
        gid,
        'JEEP'
    );

    insert into rent_info (
        garageid,
        vehicletype
    ) values (
        gid,
        'BIKE'
    );

    insert into rent_info (
        garageid,
        vehicletype
    ) values (
        gid,
        'MICRO'
    );

end;

create or replace procedure entryvehicle (
    vno   in vehicle_info.vehicleno%type,
    gid   in garage.garageid%type,
    pamnt in has_payment.payment_amount%type,
    stype in has_payment.servicetype%type
) as
begin
    insert into has_payment values (
        vno,
        gid,
        current_timestamp,
        pamnt,
        stype
    );

    update rent_info
    set
        leftlong = leftlong - (
            case
                when stype = 'LONG' then
                    1
                else
                    0
            end
        ),
        leftshort = leftshort - (
            case
                when stype = 'SHORT' then
                    1
                else
                    0
            end
        )
    where
            garageid = gid
        and vehicletype = (
            select
                vehicletype
            from
                vehicle_info
            where
                vehicleno = vno
        );

end;

create or replace procedure exitvehicle (
    vno   in vehicle_info.vehicleno%type,
    gid   in garage.garageid%type,
    stype in has_payment.servicetype%type,
    tamnt in takes_service.total_amount%type,
    pd    in takes_service.paid%type
) as
    st_time date;
begin
    update rent_info
    set
        leftlong = leftlong + (
            case
                when stype = 'LONG' then
                    1
                else
                    0
            end
        ),
        leftshort = leftshort + (
            case
                when stype = 'SHORT' then
                    1
                else
                    0
            end
        )
    where
            garageid = gid
        and vehicletype = (
            select
                vehicletype
            from
                vehicle_info
            where
                vehicleno = vno
        );

    select
        st_date
    into st_time
    from
        has_payment
    where
            vehicleno = vno
        and garageid = gid;

    insert into takes_service (
        garageid,
        vehicleno,
        servicetype,
        start_time,
        end_time,
        total_amount,
        paid
    ) values (
        gid,
        vno,
        stype,
        st_time,
        current_timestamp,
        tamnt,
        pd
    );

    delete from has_payment
    where
            vehicleno = vno
        and garageid = gid;

end;

create or replace procedure notice_park_for_due (
    g  in integer,
    tk in takes_service.paid%type,
    d  in notice.message%type
) as
    usid integer;
begin
    select
        ownerid
    into usid
    from
        garage
    where
        garageid = g;

    insert into notice (
        userid,
        message
    ) values (
        usid,
        'You have to send '
        || tk
        || ' tk to admin for parking on '
        || d
    );

end;

 -- Functions
create or replace type park_vehicle_price as object (
        garageid    integer,
        ownerid     integer,
        country     varchar2(30),
        city        varchar2(30),
        area        varchar2(30),
        name        varchar2(100),
        longitude   number(12, 8),
        latitude    number(12, 8),
        status      integer,
        vehicletype varchar2(20),
        costshort   number(12, 4),
        costlong    number(12, 4),
        leftshort   integer,
        leftlong    integer
);

create or replace type park_vehicle_price_table as
    table of park_vehicle_price;

create or replace function show_parks (
    vtype in rent_info.vehicletype%type,
    plon  in garage.longitude%type,
    plat  in garage.latitude%type
) return park_vehicle_price_table as

    parks_array park_vehicle_price_table;
    cursor all_parks is
    select
        g.*,
        r.vehicletype,
        r.costshort,
        r.costlong,
        r.leftshort,
        r.leftlong
    from
             garage g
        join rent_info r on g.garageid = r.garageid
    where
        r.vehicletype = vtype
    order by
        abs(g.longitude - plon) + abs(g.latitude - plat)
    fetch first 20 rows only;

begin
    parks_array := park_vehicle_price_table();
    for park_row in all_parks loop
        parks_array.extend;
        parks_array(parks_array.count) := park_vehicle_price(park_row.garageid, park_row.ownerid, park_row.country, park_row.city, park_row.area
        ,
                                                            park_row.name, park_row.longitude, park_row.latitude, park_row.status, park_row.vehicletype
                                                            ,
                                                            park_row.costshort, park_row.costlong, park_row.leftshort, park_row.leftlong
                                                            );

    end loop;

    return parks_array;
end;

create or replace type USR as object (
        USERID integer,
        name   varchar2(100),
        EMAIL  varchar2(100)
);

create or replace type usr_table as
    table of usr;

create or replace function signup (
    uname  users.name%type,
    uemail users.email%type,
    ha     users.password%type
) return usr_table as
    pragma autonomous_transaction;
    email_exists exception;
    cnt  integer := 0;
    utab usr_table;
    uid  integer;
begin
    select
        count(*)
    into cnt
    from
        users
    where
        email = uemail;

    if cnt > 0 then
        raise email_exists;
    end if;
    insert into users (
        name,
        email,
        password
    ) values (
        uname,
        uemail,
        ha
    );

    select
        userid
    into uid
    from
        users
    where
        email = uemail;

    utab := usr_table();
    utab.extend;
    utab(utab.count) := usr(uid, uname, uemail);
    commit;
    return utab;
exception
    when email_exists then
        raise_application_error(-20002, 'Email already exists');
end;

 -- Views
create or replace force view due_payment_to_admin_view as
    with gap as (
        select
            garageid,
            to_char(garage_admin_pay.payment_time, 'dd Mon, yyyy') payment_time,
            sum(amount)                                            amount
        from
            garage_admin_pay
        group by
            garageid,
            to_char(garage_admin_pay.payment_time, 'dd Mon, yyyy')
    ), ts as (
        select
            garageid,
            to_char(end_time, 'dd Mon, yyyy') pay_day,
            round(sum(paid) *.15,
                  0)                          paid
        from
            takes_service
        group by
            garageid,
            to_char(end_time, 'dd Mon, yyyy')
    )
    select
        ts.garageid,
        ts.pay_day,
        g.name,
        g.area,
        g.city,
        g.country,
        ts.paid                      total_amount,
        ts.paid - nvl(gap.amount, 0) total_due
    from
        ts
        left join gap on ts.garageid = gap.garageid
                         and ts.pay_day = gap.payment_time
        join garage g on ts.garageid = g.garageid
    where
        ts.paid - nvl(gap.amount, 0) > 0
    order by
        ts.paid - nvl(gap.amount, 0) desc;

create or replace force view getallparks as
    select
        "garageid",
        "ownerid",
        "country",
        "city",
        "area",
        "name",
        "longitude",
        "latitude",
        "status"
    from
        garage;

 -- Triggers
create or replace trigger notify_pay_to_admin before
    insert on garage_admin_pay
    for each row
declare
    usid integer;
begin
    select
        ownerid
    into usid
    from
        garage
    where
        garageid = :new.garageid;

    insert into notice (
        userid,
        message
    ) values (
        usid,
        'You sent '
        || :new.amount
        || ' tk to admin'
    );

end;

create or replace trigger notify_entry_vehicle before insert on has_payment for each row declare usid integer;
gname varchar2(200);
vname varchar2(200);
begin
    select
        vehicle_owner into usid
    from
        vehicle_info
    where
        vehicleno = :new.vehicleno;
    select
        vehicle_company
        || ' '
        || vehicle_model
        || ' ('
        || vehicle_color
        || ')' into vname
    from
        vehicle_info
    where
        vehicleno = :new.vehicleno;
    select
        name
        || ', '
        || area
        || ', '
        || city
        || ', '
        || country into gname
    from
        garage
    where
        garageid = :new.garageid;
    insert into notice (
        userid,
        message
    ) values (
        usid,
        'Your vehicle '
        || vname
        || ' entered into ' 
        || gname
    );
end;

create or replace trigger notify_exit_vehicle before insert on takes_service for each row declare usid integer;
gname varchar2(200);
vname varchar2(200);
begin
    select
        vehicle_owner into usid
    from
        vehicle_info
    where
        vehicleno = :new.vehicleno;
    select
        vehicle_company
        || ' '
        || vehicle_model
        || ' ('
        || vehicle_color
        || ')' into vname
    from
        vehicle_info
    where
        vehicleno = :new.vehicleno;
    select
        name
        || ', '
        || area
        || ', '
        || city
        || ', '
        || country into gname
    from
        garage
    where
        garageid = :new.garageid;
    insert into notice (
        userid,
        message
    ) values ( usid,
'Your vehicle ' || vname
                   || ' exited from ' 
        || gname
    );
end;
